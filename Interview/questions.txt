// -----------
// OOPS
// -----------
what is use of virtual destructor ?
what is benefit of run time polymorphism using virtual function?
what is difference between abstraction and encapsulation ?

Tell me How do you avoid memory leaks in program. 
How do you identify memory leaks ? 
what is deep copy?

write copy constructor for following class 
class Test {
  int * buffer; // buffer size = 100 integeres
  public:
   // copy constructor
}
What is use of move constructor? 
what is use of assignment operator?
what is rule of 3 or rule of five ? 

what is different types of memory allocations done by program?
what is use of static variables? 
Can you tell something about lifetime of variables declared in program ? 

what is mutable ? 
Sometimes there is requirement to modify one or more data members of class / struct through const function 
even though you donâ€™t want the function to update other members of class / struct

What is an inline function?

what is difference between reference and pointer ? 

Design
===========
can you tell me some class design principles?
which design patterns have you used ? 


ADVANCE C++
=============
what is use of forward declaration of class?
what is use of functor?
what is use of lambda function?
what is object slicing?

Data structures
==================
what is difference between STL vector and list?
what is time complexity of binary search algorithm?
how many comparisons will happen if n=5000?

Multi-threading
=================
Have you done any Multi-threading work ? 
Give example of Multi-threading function.
what is use of mutex ? 
what is re-entrant function?

UI (QT)
===============
what is queued connection?
What happens if the same signal and slot is connected twice?
=>It's perfectly acceptable to connect the slot twice or even more times but when the signal gets fired your slot will be called for each connection you made which is probably not what you want.

Puzzles
===========
There are 2 singly linked lists with different head pointers but common tail nodes. 
Find first common node between these 2 linked lists in single pass. Number of nodes before this common node
can be different in both linked lists. 

School question: Find middle element of singly linked list in one pass.

Find third last element in singly linked list in one pass. 

How to find height of the binary search tree. 

Find number of ways to climb stairs by climbing only one step or 2 steps at time

// ----------
// Programs
// ----------
how to check whether number is prime or not ? 
how to calculate nth number in Fibonacci series? 

// -------------------------------------------------------------
Write function to print binary number of input decimal number
void printBinary(int decimal) {
   // your logic goes here 
}

// -------------------------------------------------------------
// write a function to print all prime numbers between given 2 numbers.
// for e.g 
// printPrimeNumbers(10, 20)
// output:
// Prime numbers between 10 and 20 are 11, 13, 17, 19,
// write definition of following function declaration
void printPrimeNumbers(int a, int b);

// -------------------------------------------------------------
// write a function to right shift array by 'k' elements in place. 
// NO extra array memory should be used.
void RightShiftArray(int* arr, int Arraysize, int k);

// For example, consider following array input and function call 
// Input array: int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9};
// RightShiftArray(arr, 9, 2);
// Output array: int arr[] = {8, 9, 1, 2, 3, 4, 5, 6, 7}; 

// write definition of following function
void RightShiftArray(int* arr, int Arraysize, int k);

// ----------------------------------------------------------
// Write a function to check if input number is perfect.
// Number is perfect if N is equal to sum of proper positive divisors (excluding the number itself)
// for e.g N=6  its divisors are (1,2,3) and (1+2+3) = 6
// for e.g N=28 its divisors are (1,2,4,7,14) and (1+2+4+7+14) = 28 
bool IsPerfectNumber(int n) {

}

// ----------------------------------------------------------
// Tokenize a string . String S contains space separated words. Some group of words are enclosed in quotes.
// YOu have to break this string into indivisual words without breaking parts of string that are enclosed in quotes. 
// for e.g S= xyz abc mnp "hdjs ueos kjf" def kmm
// output :
// xyz 
// abc 
// mnp 
// "hdjs ueos kjf" 
// def 
// kmm

// 
// To convert QT project to visual studio 
qmake -tp vc


// ---------------------------------------------------
// For Senior person 
// ---------------------------------------------------
Write a class which can be instantiated but not inherited.
Improve this class further to be able to create only 5 instances of it. 
Make it thread safe.


Write a class which has one static member and one nonstatic member. 
Static function should be able to access nonstatic member

write a method which takes string and position.
Check if substring from that position ahead is palindrome or not. 
bool isSubPalindrome(std::string input, int pos)
{
	size_t len = input.length();
	size_t j=1;
	if (pos>len)
		return false;
	for(size_t i=pos;i<len && i<(len-j); i++,j++) {
		if (input[i]!=input[len-j]) 
			return false;
	}
	
	return true;
}

// Write a program to find minimum cost path from Source to destination in Binary matrix
// C++ program to find the shortest path between
// a given source cell to a destination cell.
#include <bits/stdc++.h>
using namespace std;
#define ROW 9
#define COL 10
 
//To store matrix cell cordinates
struct Point
{
    int x;
    int y;
};
 
// A Data Structure for queue used in BFS
struct queueNode
{
    Point pt;  // The cordinates of a cell
    int dist;  // cell's distance of from the source
};

// Driver program to test above function
int main()
{
    int mat[ROW][COL] =
    {
        { 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 1, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
        { 1, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
        { 1, 1, 1, 0, 1, 1, 1, 0, 1, 0 },
        { 1, 0, 1, 1, 1, 1, 0, 1, 0, 0 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 1, 1, 0, 0, 0, 0, 1, 0, 0, 1 }
    };
 
    Point source = {0, 0};
    Point dest = {3, 4};
 
    int dist = BFS(mat, source, dest);
 
    if (dist != -1)
        cout << "Shortest Path is " << dist ;
    else
        cout << "Shortest Path doesn't exist";
 
    return 0;
}


// Brain teaser
How to get correct advice when you can only ask one question from either a liar or a truth-teller 
2 Doors 
1 with treasure and 1 with painful death.
2 people at door. 1 always lies and 1 is honest. 
We don't know who is who. 
We can ask only one question to one of them. 
Problem: What question will you ask?

// ----------------
There are 5 guys in front you. 4 are togglers. and 1 Truth teller.
First time you ask, toggler will say truth or lie. Second time you ask 
he will give opposite answer of previous. 

Problem: Who is truth teller ? you can ask 2 questions to ask.
Solution: 1. Are you truth teller
       If Yes
          2. Who is truth teller ?
	   If NO
	      2. WHo is not truth teller ? 

// ------------------
There are 10 guys standing in line. In pitch dark. Alien is going to put Red or green cap on everyones head.
Turn on lights. And now going to start asking what color hat is on your head ? If answer is wrong Alien will kill 
and then ask question to next guy. 

Problem: You have to come up with system so that you save maximum people. 

solution: 10th person Counts number of green hats. If its odd then he will say "Green"
          else he will say "REd". Next guy will figure out his color using mismatch in Even/Odd
		 
// ---------------------
Calculate how many ways are there to go from left top corner of Table to right bottom corner of table. 
(Binomial coefficients)
for e.g 4X4 there are 20 ways 
1 1 1 1 
1 2 3 4
1 3 6 10
1 4 10 20



// ------------------------------------------------------------
// Create a class which can be instantiated but not inherited
// ------------------------------------------------------------

class A
{

public:

static A* createInstance() {
	
	lock(m_mutex);
  if (counter<5) {
	  
     counter++;
	 unlock(m_mutex);
  } else {
	  unlock(m_mutex);
	 return nullptr;
  }
  
  return new A();
}

~A() {
	
	 lock(m_mutex);
     counter--;
	 unlock(m_mutex);
	delete[] buffer;
}

private:
static int counter = 0;
int *buffer;
std::mutex m_mutex;
A() {
	buffer = new int[100];

}

// ---------------------------------------------------
// Publisher Subscriber Design pattern 
// ---------------------------------------------------

class Publisher 
{
	private:
	std::vector<ISubscriber*> m_subscribers;
	
public:

void register(ISubscriber* ptr) {
	m_subscribers.push_back(ptr);
}

void Unregister(ISubscriber* ptr) {
	// find and remove ptr from m_subscribers
}

void process(){
	
	// perform process
	// Notify all subscribers
	UpdateSubscribers();
}	
		
	void UpdateSubscribers() {
		for(auto a : m_subscribers) {
		a->Update();
	}
	}
};

class ISubscriber {
	Publisher* m_publisher;
	public:
	ISubscriber(Publisher* source) : m_publisher(source) {
	}
	virtual void Update() = 0;
	
};


class SubscriberA : public ISubscriber {
	SubscriberA(Publisher* source) : ISubscriber(source) {
		source->register(this);
		
	void Update() {
		// update for publisher
		//m_publisher->getdata();
	}
};

class SubscriberB : public ISubscriber {
	
	SubscriberB(Publisher* source) : ISubscriber(source) {
		source->register(this);
	}
	void Update() {
		// update for publisher
		//m_publisher->getdata();
	}
};


void main() {
	Publisher p1;
	SubscriberA s1(&p1);
	SubscriberB s2(&p1);
	p1.process();
	
}


// --------------------------------------------------------------------
// Extend singleton class to provide 5 instances. SO call it fiveTon
// If I make 6 calls i should again get the first instance. 
// --------------------------------------------------------------------

#include <iostream>
#include <vector>

using namespace std;

class Subject {

  public:
  
  void func() {
     std::cout << "Hello :" <<m_id << std::endl;
  }
  
  static Subject* getInstance() {
    static size_t counter;
    size_t currentIndex = counter%5;
    if(currentIndex >= m_instances.size()) {
       m_instances.push_back(new Subject(counter)); 
    }
    counter++;
    return m_instances[currentIndex];
  }
  

  private:
  Subject(size_t id):m_id(id) {

  }
  static std::vector<Subject*> m_instances;
  int m_id;
};

std::vector<Subject*> Subject::m_instances;

int main() {
  
  for(int i=0;i<7;i++) {
    Subject* s = Subject::getInstance();
    s->func();
  }
    
  return 0;
}


////////////////
// SOLID principles
1 . Single Responsibility : \
There should be only one reason for class/function/component to change. For e.g If We write class Vehicle it will have to do lot of things
such as oilcheck(), airPressure, Accelerate() etc. But if we split the class into Tyre, Engine then responsibility of oilCheck and airPressure will 
go with Engine and Tyre class. This principle leads to more reusability. 
2. Open Close principle
A class should be open for extension but close for modification. Promotes re utilization. When we split class, it should be such that behavior can 
be extended or replaced. For e.g Say you have Base class Shape which has method CalculateArea() which takes array of shapes. This method checks what
kind of shape it is and then uses different logic to calculate area and then adds it. With this approach whenever new shape is added, you have to change Shape class CalculateArea() method to conside this new Shape. Instead of this if Shape class has virtual function Area()
which returns area of that Shape then you can simply create new class and override area() method. 
3. Liskov substitution
You should be able to change an instance using sub type and your code should still work 
IF you write Square class and derive it from Rectangle then its not proper inheritance. You can't replace rectangle uses by Square.
So do not use inheritance to just avoid some lines of code. You should be able to replace Base class instance with derived class instance. 
4. Interface segragation 
More interface are better than too little
Allows to split responsibility of class without Liskov substitution principle.
Client should not be forced to implement interfaces they don't use. 
Instead of one FAT interface many small interfaces are preferred based on groups of methods each one serving submodule. 
For e.g Class animal has feed() method. We derive Dog and Tiger from Animal. Now we add groom() method to Animal base class. Now Tiger can't be groomed.
Hence its not really useful method for Tiger. But to keep Compiler happy we provide dummy implementation of groom() for Tiger. 
So instead of that, create another interface Pet deriving from Animal. Add groom() method to it and then derive Dog from Pet. 
5. dependency Inversion
One should depend on abstraction than concrete implementation



                     